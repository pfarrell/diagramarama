.row
  .col-xs-12#mydiagram
    .col-xs-3
      %form#editor
        %textarea.text{name: "text"}= diagram && diagram.text
        .link
          %select.theme{name: "theme"}
            %option{value:"simple"}
              Simple
            %option{value:"hand"}
              Hand drawn
            %option{value:"pat", selected: true}
              Pat Custom
          %a.download{href: "#"}
            Download
          %a.btn.btn-primary{ onclick: "save_diagram()" }
            Save
    .col-xs-9.diagram
-if diagram.nil?
  :javascript
    function save_diagram() {
      var url = "/diagram"
      var form = $('#editor');
      post(form, url)
    }
-else
  :javascript
    function save_diagram() {
      var url = "/diagram/#{diagram.id}"
      var form = $('#editor');
      $.ajax( {
        url: url,
        data: form.serialize(),
        method: 'put',
      })
      .done(function(msg) {
      });
      }
:javascript

  $(document).ready(function() {
    setup_editor($('#mydiagram'))
  });

  function debounce(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };

  function setup_editor(div) {
    var diagram_div = div.find(".diagram");
    var theme_div = div.find(".theme");
    var download_link = div.find('.download');
    var editor = $(".text").get(0);

    //editor.setTheme("ace/theme/crimson_editor");
    //editor.on('change', 
    $(".text").on('input', function() {
      debounce(update_diagram, 100)();
    });

    download_link.click(function(ev) {
      var svg = diagram_div.find('svg')[0];
      var width = parseInt(svg.width.baseVal.value);
      var height = parseInt(svg.height.baseVal.value);
      var data = editor.getValue();
      var xml = '<?xml version="1.0" encoding="utf-8" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"><svg xmlns="http://www.w3.org/2000/svg" width="' + width + '" height="' + height + '" xmlns:xlink="http://www.w3.org/1999/xlink"><source><![CDATA[' + data + ']]></source>' + svg.innerHTML + '</svg>';
    
      var a = $(this);
      a.attr("download", "diagram.svg"); // TODO I could put title here
      a.attr("href", "data:image/svg+xml," + encodeURIComponent(xml));
    });

    theme_div.change(update_diagram);
    update_diagram();

    function update_diagram() {
      try {
        var diagram = Diagram.parse(editor.value);

        // Clear out old diagram
        diagram_div.html('');

        var options = {
          theme: theme_div.val(),
          scale: 1,
          useSoftTabs: true
        };

        // Draw
        diagram.drawSVG(diagram_div.get(0), options);

      } catch(err) {
        var annotation = {
          type: "error", // also warning and information
          column: 0,
          row: 0,
          text: err.message
        };
        if (err instanceof Diagram.ParseError) {
          annotation.row    = err.loc.first_line - 1;
          annotation.column = err.loc.first_column;
        }
        throw err;
      }
    }
  }
